generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods.
<T> --> generics are delimited by using "<>"
Why use Generics?
1. Elimination of casts.
The following code snippet without generics requires casting:

List list = new ArrayList();
list.add("hello");
String s = (String) list.get(0);

When re-written to use generics, the code does not require casting:


List<String> list = new ArrayList<String>();
list.add("hello");
String s = list.get(0);   // no cast

2. Enabling programmers to implement generic algorithms.
By using generics, programmers can implement generic algorithms that work on collections of different types,
 can be customized, and are type safe and easier to read.

Generic Types

A generic type is a generic class or interface that is parameterized over types.
The most commonly used type parameter names are:

E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types

Type Parameter and Type Argument Terminology: the terms "type parameter" and "type argument" are not the same.
When coding, one provides type arguments in order to create a parameterized type.
Therefore, the T in Foo<T> is a type parameter and the String in Foo<String> f is a type argument.